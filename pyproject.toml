[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "keeper"
version = "0.1.0"
description = "Enterprise secret management synchronization between AWS Secrets Manager and HashiCorp Vault"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Keeper Team", email = "team@keeper.io"}
]
maintainers = [
    {name = "Keeper Team", email = "team@keeper.io"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Systems Administration",
    "Framework :: Flask",
]
requires-python = ">=3.9"
dependencies = [
    "flask>=3.0.0",
    "flask-sqlalchemy>=3.1.1",
    "flask-wtf>=1.2.1",
    "sqlalchemy>=2.0.23",
    "pymysql>=1.1.0",
    "boto3>=1.34.0",
    "hvac>=2.1.0",
    "python3-saml>=1.16.0",
    "pydantic>=2.5.0",
    "cryptography>=41.0.8",
    "gunicorn>=21.2.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.7",
    "jinja2>=3.1.6",
    "bcrypt>=4.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-flask>=1.3.0",
    "ruff>=0.1.6",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
]

[project.urls]
Homepage = "https://github.com/keeper-team/keeper"
Documentation = "https://keeper.readthedocs.io/"
Repository = "https://github.com/keeper-team/keeper.git"
Issues = "https://github.com/keeper-team/keeper/issues"

[project.scripts]
keeper = "keeper.cli:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["keeper*"]
exclude = ["tests*"]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["keeper"]

# mypy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["hvac.*", "python3_saml.*"]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["keeper"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "black>=25.9.0",
    "isort>=6.0.1",
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-flask>=1.3.0",
    "ruff>=0.13.1",
]
