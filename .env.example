# Keeper Configuration Example
# Copy this file to .env and update with your values

# Flask Configuration
# SECRET_KEY is defined in keeper/config.py with a development fallback
# Do not set it here to avoid CLI/web server configuration drift
# For production, set SECRET_KEY as an environment variable directly
FLASK_ENV=development

# Database Configuration
DATABASE_URL=sqlite:///keeper_dev.db
# For MySQL: DATABASE_URL=mysql+pymysql://keeper:password@localhost/keeper

# AWS Configuration
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key

# AWS KMS Configuration (Production)
KMS_KEY_ID=arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
# OR use alias:
KMS_KEY_ALIAS=alias/keeper-production
KMS_REGION=us-east-1
KMS_ENCRYPTION_CONTEXT={"application":"keeper","environment":"production"}
ENABLE_KMS_KEY_ROTATION=true
KMS_DEK_CACHE_TTL=3600
KMS_MAX_RETRIES=3

# Key Management Backend Selection
# Use 'kms' for AWS KMS, 'local' for development
KEY_MANAGEMENT_BACKEND=local

# HashiCorp Vault Configuration
VAULT_URL=http://localhost:8200
VAULT_TOKEN=myroot
VAULT_MOUNT_POINT=secret

# Okta SAML Configuration (Optional)
OKTA_ISSUER=https://your-org.okta.com
OKTA_CLIENT_ID=your-okta-client-id
OKTA_CLIENT_SECRET=your-okta-client-secret
OKTA_METADATA_URL=https://your-org.okta.com/app/your-app-id/sso/saml/metadata

# Application Settings
SECRETS_PER_PAGE=20

# Production MySQL Configuration
MYSQL_ROOT_PASSWORD=secure-root-password
MYSQL_PASSWORD=secure-keeper-password

# Legacy Encryption (for migration only)
KEEPER_DEFAULT_ENCRYPTION_KEY=your-legacy-key-here

# Development Note:
# For development, set KEY_MANAGEMENT_BACKEND=local to use local encryption
# For production, set KEY_MANAGEMENT_BACKEND=kms and configure KMS settings above